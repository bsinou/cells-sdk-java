/*
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pydio.sdk.core.api.cells.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.sdk.core.api.cells.model.ServiceQuery;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * JobsNodesSelector
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-08-26T11:16:15.623+02:00")



public class JobsNodesSelector {
  @SerializedName("All")
  private Boolean all = null;

  @SerializedName("Pathes")
  private List<String> pathes = null;

  @SerializedName("Query")
  private ServiceQuery query = null;

  @SerializedName("Collect")
  private Boolean collect = null;

  public JobsNodesSelector all(Boolean all) {
    this.all = all;
    return this;
  }

   /**
   * Get all
   * @return all
  **/
  @ApiModelProperty(value = "")
  public Boolean isAll() {
    return all;
  }

  public void setAll(Boolean all) {
    this.all = all;
  }

  public JobsNodesSelector pathes(List<String> pathes) {
    this.pathes = pathes;
    return this;
  }

  public JobsNodesSelector addPathesItem(String pathesItem) {
    if (this.pathes == null) {
      this.pathes = new ArrayList<String>();
    }
    this.pathes.add(pathesItem);
    return this;
  }

   /**
   * Get pathes
   * @return pathes
  **/
  @ApiModelProperty(value = "")
  public List<String> getPathes() {
    return pathes;
  }

  public void setPathes(List<String> pathes) {
    this.pathes = pathes;
  }

  public JobsNodesSelector query(ServiceQuery query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @ApiModelProperty(value = "")
  public ServiceQuery getQuery() {
    return query;
  }

  public void setQuery(ServiceQuery query) {
    this.query = query;
  }

  public JobsNodesSelector collect(Boolean collect) {
    this.collect = collect;
    return this;
  }

   /**
   * Get collect
   * @return collect
  **/
  @ApiModelProperty(value = "")
  public Boolean isCollect() {
    return collect;
  }

  public void setCollect(Boolean collect) {
    this.collect = collect;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobsNodesSelector jobsNodesSelector = (JobsNodesSelector) o;
    return Objects.equals(this.all, jobsNodesSelector.all) &&
        Objects.equals(this.pathes, jobsNodesSelector.pathes) &&
        Objects.equals(this.query, jobsNodesSelector.query) &&
        Objects.equals(this.collect, jobsNodesSelector.collect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(all, pathes, query, collect);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobsNodesSelector {\n");
    
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("    pathes: ").append(toIndentedString(pathes)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    collect: ").append(toIndentedString(collect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

